package com.mumu.exchange.api;

import java.util.HashMap;
import java.util.Map;

public final class BinanceAPI {
	
	//API-keys are passed into the Rest API via the X-MBX-APIKEY header.
	public static final String API_SIGN_KEY_AccessKeyId = "X-MBX-APIKEY";
	public static final String API_SIGN_KEY_Secret_key = "secret_key";
	public static final String API_SIGN_SignatureMethod = "HMACSHA256";
	public static final String API_SIGN_KEY_authorization = "signature";
	public static final String API_SIGN_KEY_Timestamp = "timestamp";
	public static final String API_SIGN_KEY_recvWindow = "recvWindow";//
	public static final String API_SIGN_DEFVAL_recvWindow = "60000";//
	
	private static Map<String, String> uriMethodMap = new HashMap<String, String>();
	public static final String rest_trading_root = "https://api.binance.com";//https://api.binance.com/api/v1/exchangeInfo
	public static final String ws_root = "wss://stream.binance.com:9443";
	
	
	/**
	 * 用户资产API
	 */
	public static final String api_account = "/api/v3/account";
	public static final String api_account_method_get = "GET";
	static { uriMethodMap.put(api_account, api_account_method_get); }
	public static enum Api_userinfo_params {
		
	}
	
	/**
	 * POST /api/v3/order  (HMAC SHA256)
	 * Send in a new order.
	 * Weight: 1
	 */
	public static final String api_order = "/api/v3/order";
	public static final String api_order_method_post = "POST";
	static { uriMethodMap.put(api_order, api_order_method_post); }
	public static enum Api_order_params {
		symbol("symbol"),//	STRING	YES	
		side("side"),//	ENUM	YES	
		type("type"),//	ENUM	YES	
		timeInForce("timeInForce"),//	ENUM	NO	
		quantity("quantity"),///	DECIMAL	YES	
		price("price"),//	DECIMAL	NO	
		newClientOrderId("newClientOrderId"),//	STRING	NO	A unique id for the order. Automatically generated if not sent.
		stopPrice("stopPrice"),	//DECIMAL	NO	Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
		icebergQty("icebergQty"),//	DECIMAL	NO	Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
		newOrderRespType("newOrderRespType");//	ENUM	NO	Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK.
//		recvWindow("recvWindow"	LONG	NO	
//		timestamp	LONG	YES	
		
		private final String code;
		
		private Api_order_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	/**
	 * Cancel order (TRADE)
	 *	DELETE /api/v3/order  (HMAC SHA256)
	 *	Cancel an active order.
	 */
	public static final String api_cancel_order = "/api/v3/order";
	public static final String api_cancel_order_alias = "api_cancel_order";
	public static final String api_cancel_order_method_delete = "DELETE";
	static { uriMethodMap.put(api_cancel_order_alias, api_cancel_order_method_delete); }
	public static enum Api_cancel_order_params {
		symbol("symbol"),//	STRING	YES	
		orderId("orderId"),//	LONG	NO	
		origClientOrderId("origClientOrderId"),//	STRING	NO	
		newClientOrderId("newClientOrderId");//	STRING	NO	Used to uniquely identify this cancel. Automatically generated by default.
		
		private final String code;
		
		private Api_cancel_order_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	/**
	 * GET /api/v3/order (HMAC SHA256)
	 * Check an order's status.
	 * Weight: 1
	 */
	public static final String api_get_order = "/api/v3/order";
	public static final String api_get_order_alias = "api_get_order";
	public static final String api_get_order_method_get = "GET";
	static { uriMethodMap.put(api_get_order_alias, api_get_order_method_get); }
	public static enum Api_get_order_params {
		symbol("symbol"),//	STRING	YES	
		orderId("orderId"),//	LONG	NO	
		origClientOrderId("origClientOrderId");//	STRING	NO	
		
		private final String code;
		
		private Api_get_order_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	
	/**
	 * 
	 *GET /api/v3/openOrders  (HMAC SHA256)
	 *Get all open orders on a symbol. Careful when accessing this with no symbol.
	 *Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
	 *If the symbol is not sent, orders for all symbols will be returned in an array.
		When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange.
	 */
	public static final String api_openOrders = "/api/v3/openOrders";
	public static final String api_openOrders_method_get = "GET";
	static { uriMethodMap.put(api_openOrders, api_openOrders_method_get); }
	public static enum Api_openOrders_params {
		symbol("symbol");
		
		private final String code;
		
		private Api_openOrders_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	/**
	 * GET /api/v3/allOrders (HMAC SHA256)
	 * Get all account orders; active, canceled, or filled.
	 * Weight: 5 with symbol
	 */
	public static final String api_allOrders = "/api/v3/allOrders";
	public static final String api_allOrders_method_get = "GET";
	static { uriMethodMap.put(api_allOrders, api_allOrders_method_get); }
	public static enum Api_allOrders_params {
		symbol("symbol"),
		orderId("orderId"),	//LONG	NO	
		startTime("startTime"),	//LONG	NO	
		endTime("endTime"),	//LONG	NO	
		limit("limit");//	INT	NO	Default 500; max 1000.
	
		private final String code;
		
		private Api_allOrders_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}

	/**
	 * GET /wapi/v3/depositHistory.html (HMAC SHA256)
		Fetch deposit history.
		Weight: 1
	 * 
	 */
	public static final String wapi_depositHistory = "/wapi/v3/depositHistory.html";
	public static final String wapi_depositHistory_method_get = "GET";
	static { uriMethodMap.put(wapi_depositHistory, wapi_depositHistory_method_get); }
	public static enum Wapi_depositHistory_params {
		asset("asset"),//	STRING	NO	
		status("status"),//	INT	NO	0(0:pending,1:success)
		startTime("startTime"),//	LONG	NO	
		endTime("endTime");//	LONG	NO	
	
		private final String code;
		
		private Wapi_depositHistory_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	
	/**
	 * GET /wapi/v3/withdrawHistory.html (HMAC SHA256)
	 * Fetch withdraw history.
	 * Weight: 1
	 */
	public static final String wapi_withdrawHistory = "/wapi/v3/withdrawHistory.html";
	public static final String wapi_withdrawHistory_method_get = "GET";
	static { uriMethodMap.put(wapi_withdrawHistory, wapi_withdrawHistory_method_get); }
	public static enum Wapi_withdrawHistory_params {
		asset("asset"),//	STRING	NO	
		status("status"),//	INT	NO	(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6Completed)
		startTime("startTime"),//	LONG	NO	
		endTime("endTime");//	LONG	NO	
	
		private final String code;
		
		private Wapi_withdrawHistory_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}

	/**
	 * GET /api/v1/ticker/24hr
		24 hour price change statistics. Careful when accessing this with no symbol.
		Weight: 1 for a single symbol; 40 when the symbol parameter is omitted
	 */
	public static final String api_ticker_24hr = "/api/v1/ticker/24hr";
	public static final String api_ticker_24hr_method_get = "GET";
	static { uriMethodMap.put(api_ticker_24hr, api_ticker_24hr_method_get); }
	public static enum Api_ticker_24hr_params {
		symbol("symbol");//	STRING	NO
	
		private final String code;
		
		private Api_ticker_24hr_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	
	/**
	 * Recent trades list
	 *GET /api/v1/trades
	 *Get recent trades (up to last 500).
	 */
	public static final String api_trades = "/api/v1/trades";
	public static final String api_trades_method_get = "GET";
	static { uriMethodMap.put(api_trades, api_trades_method_get); }
	public static enum Api_trades_params {
		symbol("symbol"),//	STRING	YES	
		limit("limit");//	INT	NO	Default 500; max 1000.
	
		private final String code;
		
		private Api_trades_params(String code) {
			this.code = code;
		}
		public String getCode() {
			return code;
		}
	}
	
	public static String getMethodByApiUri(String uri) {
		return uriMethodMap.get(uri);
	}
}
